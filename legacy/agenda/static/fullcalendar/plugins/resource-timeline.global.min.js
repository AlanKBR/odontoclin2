/*!
FullCalendar Resource Timeline Plugin v6.1.18
// Docs: https://fullcalendar.io/docs/timeline-view
(c) 2024 Adam Shaw
*/
FullCalendar.ResourceTimeline = function(e, t, r, o, n, l, s, i, a, d) {
    "use strict";

    function c(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var u = c(r),
        h = c(o),
        p = c(n);

    function m({
        depth: e,
        hasChildren: t,
        isExpanded: r,
        onExpanderClick: o
    }) {
        let n = [];
        for (let t = 0; t < e; t += 1) n.push(s.createElement("span", {
            className: "fc-icon"
        }));
        let l = ["fc-icon"];
        return t && (r ? l.push("fc-icon-minus-square") : l.push("fc-icon-plus-square")), n.push(s.createElement("span", {
            className: "fc-datagrid-expander" + (t ? "" : " fc-datagrid-expander-placeholder"),
            onClick: o
        }, s.createElement("span", {
            className: l.join(" ")
        }))), s.createElement(s.Fragment, {}, ...n)
    }
    class f extends l.BaseComponent {
        constructor() {
            super(...arguments), this.refineRenderProps = l.memoizeObjArg(C), this.onExpanderClick = e => {
                let {
                    props: t
                } = this;
                t.hasChildren && this.context.dispatch({
                    type: "SET_RESOURCE_ENTITY_EXPANDED",
                    id: t.resource.id,
                    isExpanded: !t.isExpanded
                })
            }
        }
        render() {
            let {
                props: e,
                context: t
            } = this, {
                colSpec: r
            } = e, o = this.refineRenderProps({
                resource: e.resource,
                fieldValue: e.fieldValue,
                context: t
            });
            return s.createElement(l.ContentContainer, {
                elTag: "td",
                elClasses: ["fc-datagrid-cell", "fc-resource"],
                elAttrs: {
                    role: "gridcell",
                    "data-resource-id": e.resource.id
                },
                renderProps: o,
                generatorName: r.isMain ? "resourceLabelContent" : void 0,
                customGenerator: r.cellContent,
                defaultGenerator: g,
                classNameGenerator: r.cellClassNames,
                didMount: r.cellDidMount,
                willUnmount: r.cellWillUnmount
            }, t => s.createElement("div", {
                className: "fc-datagrid-cell-frame",
                style: {
                    height: e.innerHeight
                }
            }, s.createElement("div", {
                className: "fc-datagrid-cell-cushion fc-scrollgrid-sync-inner"
            }, r.isMain && s.createElement(m, {
                depth: e.depth,
                hasChildren: e.hasChildren,
                isExpanded: e.isExpanded,
                onExpanderClick: this.onExpanderClick
            }), s.createElement(t, {
                elTag: "span",
                elClasses: ["fc-datagrid-cell-main"]
            }))))
        }
    }

    function g(e) {
        return e.fieldValue || s.createElement(s.Fragment, null, " ")
    }

    function C(e) {
        return {
            resource: new n.ResourceApi(e.context, e.resource),
            fieldValue: e.fieldValue,
            view: e.context.viewApi
        }
    }
    class R extends l.BaseComponent {
        render() {
            let {
                props: e,
                context: t
            } = this, {
                colSpec: r
            } = e, o = {
                groupValue: e.fieldValue,
                view: t.viewApi
            };
            return s.createElement(l.ContentContainer, {
                elTag: "td",
                elClasses: ["fc-datagrid-cell", "fc-resource-group"],
                elAttrs: {
                    role: "gridcell",
                    rowSpan: e.rowSpan
                },
                renderProps: o,
                generatorName: "resourceGroupLabelContent",
                customGenerator: r.cellContent,
                defaultGenerator: w,
                classNameGenerator: r.cellClassNames,
                didMount: r.cellDidMount,
                willUnmount: r.cellWillUnmount
            }, e => s.createElement("div", {
                className: "fc-datagrid-cell-frame fc-datagrid-cell-frame-liquid"
            }, s.createElement(e, {
                elTag: "div",
                elClasses: ["fc-datagrid-cell-cushion", "fc-sticky"]
            })))
        }
    }

    function w(e) {
        return e.groupValue || s.createElement(s.Fragment, null, " ")
    }
    class E extends l.BaseComponent {
        render() {
            let {
                props: e
            } = this, {
                resource: t,
                rowSpans: r,
                depth: o
            } = e, n = a.buildResourceFields(t);
            return s.createElement("tr", {
                role: "row"
            }, e.colSpecs.map((l, i) => {
                let d = r[i];
                if (0 === d) return null;
                null == d && (d = 1);
                let c = l.field ? n[l.field] : t.title || a.getPublicId(t.id);
                return d > 1 ? s.createElement(R, {
                    key: i,
                    colSpec: l,
                    fieldValue: c,
                    rowSpan: d
                }) : s.createElement(f, {
                    key: i,
                    colSpec: l,
                    resource: t,
                    fieldValue: c,
                    depth: o,
                    hasChildren: e.hasChildren,
                    isExpanded: e.isExpanded,
                    innerHeight: e.innerHeight
                })
            }))
        }
    }
    E.addPropsEquality({
        rowSpans: l.isArraysEqual
    });
    class S extends l.BaseComponent {
        constructor() {
            super(...arguments), this.innerInnerRef = s.createRef(), this.onExpanderClick = () => {
                let {
                    props: e
                } = this;
                this.context.dispatch({
                    type: "SET_RESOURCE_ENTITY_EXPANDED",
                    id: e.id,
                    isExpanded: !e.isExpanded
                })
            }
        }
        render() {
            let {
                props: e,
                context: t
            } = this, r = {
                groupValue: e.group.value,
                view: t.viewApi
            }, o = e.group.spec;
            return s.createElement("tr", {
                role: "row"
            }, s.createElement(l.ContentContainer, {
                elTag: "th",
                elClasses: ["fc-datagrid-cell", "fc-resource-group", t.theme.getClass("tableCellShaded")],
                elAttrs: {
                    role: "columnheader",
                    scope: "colgroup",
                    colSpan: e.spreadsheetColCnt
                },
                renderProps: r,
                generatorName: "resourceGroupLabelContent",
                customGenerator: o.labelContent,
                defaultGenerator: y,
                classNameGenerator: o.labelClassNames,
                didMount: o.labelDidMount,
                willUnmount: o.labelWillUnmount
            }, t => s.createElement("div", {
                className: "fc-datagrid-cell-frame",
                style: {
                    height: e.innerHeight
                }
            }, s.createElement("div", {
                className: "fc-datagrid-cell-cushion fc-scrollgrid-sync-inner",
                ref: this.innerInnerRef
            }, s.createElement(m, {
                depth: 0,
                hasChildren: !0,
                isExpanded: e.isExpanded,
                onExpanderClick: this.onExpanderClick
            }), s.createElement(t, {
                elTag: "span",
                elClasses: ["fc-datagrid-cell-main"]
            })))))
        }
    }

    function y(e) {
        return e.groupValue || s.createElement(s.Fragment, null, " ")
    }
    S.addPropsEquality({
        group: a.isGroupsEqual
    });
    class b extends l.BaseComponent {
        constructor() {
            super(...arguments), this.resizerElRefs = new l.RefMap(this._handleColResizerEl.bind(this)), this.colDraggings = {}
        }
        render() {
            let {
                colSpecs: e,
                superHeaderRendering: t,
                rowInnerHeights: r
            } = this.props, o = {
                view: this.context.viewApi
            }, n = [];
            if (r = r.slice(), t) {
                let i = r.shift();
                n.push(s.createElement("tr", {
                    key: "row-super",
                    role: "row"
                }, s.createElement(l.ContentContainer, {
                    elTag: "th",
                    elClasses: ["fc-datagrid-cell", "fc-datagrid-cell-super"],
                    elAttrs: {
                        role: "columnheader",
                        scope: "colgroup",
                        colSpan: e.length
                    },
                    renderProps: o,
                    generatorName: "resourceAreaHeaderContent",
                    customGenerator: t.headerContent,
                    defaultGenerator: t.headerDefault,
                    classNameGenerator: t.headerClassNames,
                    didMount: t.headerDidMount,
                    willUnmount: t.headerWillUnmount
                }, e => s.createElement("div", {
                    className: "fc-datagrid-cell-frame",
                    style: {
                        height: i
                    }
                }, s.createElement(e, {
                    elTag: "div",
                    elClasses: ["fc-datagrid-cell-cushion", "fc-scrollgrid-sync-inner"]
                })))))
            }
            let i = r.shift();
            return n.push(s.createElement("tr", {
                    key: "row",
                    role: "row"
                }, e.map((t, r) => {
                    let n = r === e.length - 1;
                    return s.createElement(l.ContentContainer, {
                        key: r,
                        elTag: "th",
                        elClasses: ["fc-datagrid-cell"],
                        elAttrs: {
                            role: "columnheader"
                        },
                        renderProps: o,
                        generatorName: "resourceAreaHeaderContent",
                        customGenerator: t.headerContent,
                        defaultGenerator: t.headerDefault,
                        classNameGenerator: t.headerClassNames,
                        didMount: t.headerDidMount,
                        willUnmount: t.headerWillUnmount
                    }, e => s.createElement("div", {
                        className: "fc-datagrid-cell-frame",
                        style: {
                            height: i
                        }
                    }, s.createElement(e, {
                        elTag: "div",
                        elClasses: ["fc-datagrid-cell-cushion", "fc-scrollgrid-sync-inner"]
                    })))
                })
            })), s.createElement("tr", {
            key: "row-data",
            role: "row"
        }, e.map((t, r) => s.createElement(l.ContentContainer, {
            key: r,
            elTag: "td",
            elClasses: ["fc-datagrid-cell"],
            elAttrs: {
                role: "gridcell"
            },
            renderProps: o,
            generatorName: "resourceAreaCellContent",
            customGenerator: t.cellContent,
            defaultGenerator: t.cellDefault,
            classNameGenerator: t.cellClassNames,
            didMount: t.cellDidMount,
            willUnmount: t.cellWillUnmount
        }, e => s.createElement("div", {
            className: "fc-datagrid-cell-frame"
        }, s.createElement(e, {
            elTag: "div",
            elClasses: ["fc-datagrid-cell-cushion"]
        }))))))
}
}
b.addPropsEquality({
    colSpecs: l.isArraysEqual
});
var v = t.createPlugin({
    name: "@fullcalendar/resource-timeline"
});
return t.globalPlugins.push(v), e.default = v, Object.defineProperty(e, "__esModule", {
    value: !0
}), e
}({}, FullCalendar, FullCalendar.Resource, FullCalendar.PremiumCommon, FullCalendar.Internal, FullCalendar.Preact, FullCalendar.ScrollGrid, FullCalendar.Adaptive, FullCalendar.Timeline, FullCalendar.ResourceDayGrid, FullCalendar.ResourceTimeGrid);